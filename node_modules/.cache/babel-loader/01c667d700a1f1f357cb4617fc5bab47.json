{"ast":null,"code":"const FIREBASE_DOMAIN = 'https://quoteapplication-ad60b-default-rtdb.firebaseio.com';\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data\n  };\n  return loadedQuote;\n}\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\nexport async function addComment(commentData, quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(commentData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return {\n    commentId: data.name\n  };\n}\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}","map":{"version":3,"names":["FIREBASE_DOMAIN","getAllQuotes","response","fetch","data","json","ok","Error","message","transformedQuotes","key","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj"],"sources":["C:/Users/USER/Desktop/proj/Routerpractice/src/lib/api.js"],"sourcesContent":["const FIREBASE_DOMAIN = 'https://quoteapplication-ad60b-default-rtdb.firebaseio.com';\r\n\r\nexport async function getAllQuotes() {\r\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message || 'Could not fetch quotes.');\r\n  }\r\n\r\n  const transformedQuotes = [];\r\n\r\n  for (const key in data) {\r\n    const quoteObj = {\r\n      id: key,\r\n      ...data[key],\r\n    };\r\n\r\n    transformedQuotes.push(quoteObj);\r\n  }\r\n\r\n  return transformedQuotes;\r\n}\r\n\r\nexport async function getSingleQuote(quoteId) {\r\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message || 'Could not fetch quote.');\r\n  }\r\n\r\n  const loadedQuote = {\r\n    id: quoteId,\r\n    ...data,\r\n  };\r\n\r\n  return loadedQuote;\r\n}\r\n\r\nexport async function addQuote(quoteData) {\r\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\r\n    method: 'POST',\r\n    body: JSON.stringify(quoteData),\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message || 'Could not create quote.');\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport async function addComment(commentData, quoteId) {\r\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`, {\r\n    method: 'POST',\r\n    body: JSON.stringify(commentData),\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message || 'Could not add comment.');\r\n  }\r\n\r\n  return { commentId: data.name };\r\n}\r\n\r\nexport async function getAllComments(quoteId) {\r\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\r\n\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message || 'Could not get comments.');\r\n  }\r\n\r\n  const transformedComments = [];\r\n\r\n  for (const key in data) {\r\n    const commentObj = {\r\n      id: key,\r\n      ...data[key],\r\n    };\r\n\r\n    transformedComments.push(commentObj);\r\n  }\r\n\r\n  return transformedComments;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}